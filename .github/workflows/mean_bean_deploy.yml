on:
  release:
    # Sequence of patterns matched against refs/tags
    types: [ published ]
  workflow_dispatch:
    inputs:
      tag:
        description: Release tag to build
        required: true

name: Publish
env:
  BIN: printnanny-cli printnanny-dash
  TAR: printnanny
  CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

jobs:
  cratesio:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install latest nightly
        uses: actions-rs/toolchain@v1
        with:
            toolchain: stable
            override: true
            components: rustfmt, clippy
      - run: cargo install cargo-release
      - run: cargo release --no-tag --no-push --workspace --publish --execute --no-confirm
  install-cross:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: XAMPPRocky/get-github-release@v1
        id: cross
        with:
          owner: rust-embedded
          repo: cross
          matches: ${{ matrix.platform }}
          token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/upload-artifact@v1
        with:
          name: cross-${{ matrix.platform }}
          path: ${{ steps.cross.outputs.install_path }}
    strategy:
      matrix:
        platform: [linux-musl, apple-darwin]

  # windows:
  #   runs-on: windows-latest
  #   needs: install-cross
  #   strategy:
  #     matrix:
  #       target:
  #         # MSVC
  #         - i686-pc-windows-msvc
  #         - x86_64-pc-windows-msvc
  #         # GNU
  #         # - i686-pc-windows-gnu
  #         # - x86_64-pc-windows-gnu
    # steps:
    #   - uses: actions/checkout@v2
    #   - run: bash tools/ci/set_rust_version.bash stable ${{ matrix.target }}
    #   - run: bash tools/ci/build.bash cargo ${{ matrix.target }} RELEASE
    #   - run: |
    #       cd ./target/${{ matrix.target }}/release/
    #       7z a "${{ env.BIN }}.zip" "${{ env.BIN }}.exe"
    #       mv "${{ env.BIN }}.zip" $GITHUB_WORKSPACE
    #     shell: bash
    #     # We're using using a fork of `actions/create-release` that detects
    #     # whether a release is already available or not first.
    #   - uses: XAMPPRocky/create-release@v1.0.2
    #     id: create_release
    #     env:
    #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #     with:
    #       tag_name: ${{ github.ref }}
    #       release_name: ${{ github.ref }}
    #       # Draft should **always** be false. GitHub doesn't provide a way to
    #       # get draft releases from its API, so there's no point using it.
    #       draft: false
    #       prerelease: false
    #   - uses: actions/upload-release-asset@v1
    #     id: upload-release-asset
    #     env:
    #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #     with:
    #       upload_url: ${{ steps.create_release.outputs.upload_url }}
    #       asset_path: ${{ env.BIN }}.zip
    #       asset_name: ${{ env.BIN }}-${{ matrix.target }}.zip
    #       asset_content_type: application/zip

  # macos:
  #   runs-on: macos-latest
  #   needs: install-cross
  #   strategy:
  #     matrix:
  #       target:
  #         # macOS
  #         - x86_64-apple-darwin
  #         # iOS
  #         # - aarch64-apple-ios
  #         # - armv7-apple-ios
  #         # - armv7s-apple-ios
  #         # - i386-apple-ios
  #         # - x86_64-apple-ios
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/download-artifact@v1
  #       with:
  #         name: cross-apple-darwin
  #         path: /usr/local/bin/
  #     - run: chmod +x /usr/local/bin/cross

  #     - run: tools/ci/set_rust_version.bash stable ${{ matrix.target }}
  #     - run: tools/ci/build.bash cross ${{ matrix.target }} RELEASE
  #     - run: tar -czvf ${{ env.BIN }}.tar.gz --directory=target/${{ matrix.target }}/release ${{ env.BIN }}
  #     - uses: XAMPPRocky/create-release@v1.0.2
  #       id: create_release
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         tag_name: ${{ github.ref }}
  #         release_name: ${{ github.ref }}
  #         draft: false
  #         prerelease: false
  #     - uses: actions/upload-release-asset@v1
  #       id: upload-release-asset
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ steps.create_release.outputs.upload_url }}
  #         asset_path: ${{ env.BIN }}.tar.gz
  #         asset_name: ${{ env.BIN }}-${{ matrix.target }}.tar.gz
  #         asset_content_type: application/gzip

  linux:
    runs-on: ubuntu-latest
    needs: install-cross
    strategy:
      matrix:
        target:
          # WASM, off by default as most rust projects aren't compatible yet.
          # - wasm32-unknown-emscripten
          # Linux
          - aarch64-unknown-linux-gnu
          - arm-unknown-linux-gnueabi
          - armv7-unknown-linux-gnueabihf
          # - i686-unknown-linux-gnu
          # - i686-unknown-linux-musl
          # - mips-unknown-linux-gnu
          # - mips64-unknown-linux-gnuabi64
          # - mips64el-unknown-linux-gnuabi64
          # - mipsel-unknown-linux-gnu
          # - powerpc-unknown-linux-gnu
          # - powerpc64-unknown-linux-gnu
          # - powerpc64le-unknown-linux-gnu
          # - s390x-unknown-linux-gnu
          - x86_64-unknown-linux-gnu
          # - x86_64-unknown-linux-mlinuxusl
          # Android
          # - aarch64-linux-android
          # - arm-linux-androideabi
          # - armv7-linux-androideabi
          # - i686-linux-android
          # - x86_64-linux-android
          # *BSD
          # The FreeBSD targets can have issues linking so they are disabled
          # by default.
          # - i686-unknown-freebsd
          # - x86_64-unknown-freebsd
          # - x86_64-unknown-netbsd
          # Solaris
          # - sparcv9-sun-solaris
          # Bare Metal
          # These are no-std embedded targets, so they will only build if your
          # crate is `no_std` compatible.
          # - thumbv6m-none-eabi
          # - thumbv7em-none-eabi
          # - thumbv7em-none-eabihf
          # - thumbv7m-none-eabi
    steps:
      - run: sudo apt-get update && sudo apt-get install -y pkg-config libssl-dev
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v1
        with:
          name: cross-linux-musl
          path: /tmp/
      - run: chmod +x /tmp/cross

      - run: tools/ci/set_rust_version.bash stable ${{ matrix.target }}
      - run: tools/ci/build.bash /tmp/cross ${{ matrix.target }} RELEASE
      - run: |
          tar -cvf ${{ env.TAR }}.tar --directory=target/${{ matrix.target }}/release ${{ env.BIN }}
          tar -rvf ${{ env.TAR }}.tar --directory=dash templates
          gzip -9 < ${{ env.TAR }}.tar  > ${{ env.TAR }}.tar.gz

      - uses: cardinalby/git-get-release-action@v1.1
        if: ${{ github.event.release.upload_url == undefined }}
        id: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag: ${{ github.event.inputs.tag }}
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url || steps.release.outputs.upload_url }}
          asset_path: ${{ env.TAR }}.tar.gz
          asset_name: ${{ env.TAR }}-${{ matrix.target }}.tar.gz
          asset_content_type: application/gzip   

  discord:
    runs-on: ubuntu-latest
    needs: linux
    steps:
      - name: Send Discord notification
        env:
          DISCORD_WEBHOOK: ${{ secrets.PRINT_NANNY_DISCORD_DEPLOY_WEBHOOK }}
        uses: Ilshidur/action-discord@master
        with:
          args: |
              ðŸ¦€ **Published** {{ EVENT_PAYLOAD.repository.full_name }}@{{ GITHUB_SHA }}
              **Release Notes** ${{ github.event.release.html_url || steps.release.outputs.html_url }}
